import json
import os
import re


def is_github_issue_link(url: str) -> bool:
    # Regular expression to match the GitHub issue URL format
    pattern = r"^https://github.com/[a-zA-Z0-9\-]+/[a-zA-Z0-9\-]+/issues/[0-9]+$"
    if re.match(pattern, url):
        return True
    else:
        return False


def filter_out(record: dict) -> bool:
    affected = record.get("affected")
    refs = record.get("references")
    # only choose Java project
    if not affected or not affected[0].get("package").get("ecosystem") == "Maven":
        return False
    # contains original issue
    if not any(is_github_issue_link(ref.get("url")) for ref in refs):
        return False
    # only match one CWE pattern
    if len(record.get("database_specific").get("cwe_ids")) != 1:
        return False
    return True


if __name__ == "__main__":
    for dirpath, dirnames, filenames in os.walk("advisories/github-reviewed"):
        for file_name in filenames:
            with open(os.path.join(dirpath, file_name)) as input_file:
                record: dict = json.load(input_file)
            if filter_out(record):
                with open("results.jsonl", "a") as output_file:
                    output_file.write(json.dumps(record) + "\n")
