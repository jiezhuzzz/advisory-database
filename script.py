import json
import os
import re


def is_codeql_defined_cwe(identifier: str) -> bool:
    # Regular expression to match the CodeQL-defined CWE format
    pre_defined_cwes = [
        20,
        22,
        23,
        74,
        78,
        79,
        89,
        90,
        94,
        1104,
        113,
        117,
        1204,
        129,
        134,
        190,
        200,
        209,
        266,
        273,
        287,
        295,
        297,
        312,
        319,
        326,
        327,
        330,
        335,
        338,
        347,
        352,
        367,
        421,
        441,
        470,
        489,
        501,
        502,
        522,
        524,
        532,
        601,
        611,
        614,
        643,
        676,
        681,
        730,
        732,
        749,
        780,
        798,
        807,
        829,
        833,
        835,
        917,
        918,
        925,
        926,
        927,
        940,
    ]
    cwe_id = int(re.search(r"\d+", identifier).group())
    if cwe_id in pre_defined_cwes:
        return True
    else:
        return False


def is_github_issue_link(url: str) -> bool:
    # Regular expression to match the GitHub issue URL format
    pattern = r"^https://github.com/[a-zA-Z0-9\-]+/[a-zA-Z0-9\-]+/issues/[0-9]+$"
    if re.match(pattern, url):
        return True
    else:
        return False


def filter_out(record: dict) -> bool:
    affected = record.get("affected")
    refs = record.get("references")
    cwe_ids = record.get("database_specific").get("cwe_ids")
    # only choose Java project
    if not affected or not affected[0].get("package").get("ecosystem") == "Maven":
        return False
    # contains original issue
    if not any(is_github_issue_link(ref.get("url")) for ref in refs):
        return False
    # only match one CWE pattern
    if len(cwe_ids) != 1:
        return False
    if not is_codeql_defined_cwe(cwe_ids[0]):
        return False
    return True


if __name__ == "__main__":
    for dirpath, dirnames, filenames in os.walk("advisories/github-reviewed"):
        for file_name in filenames:
            with open(os.path.join(dirpath, file_name)) as input_file:
                record: dict = json.load(input_file)
            if filter_out(record):
                with open("results_codeql.jsonl", "a") as output_file:
                    output_file.write(json.dumps(record) + "\n")
